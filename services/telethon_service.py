from telethon.sync import TelegramClient
from telethon.tl.functions.channels import CreateChannelRequest, SetDiscussionGroupRequest, InviteToChannelRequest, CreateForumTopicRequest
from telethon.tl.functions.messages import CreateChatRequest, MigrateChatRequest, ExportChatInviteRequest
from telethon.tl.types import InputChannel, InputPeerUser, InputPeerChannel
from telethon.tl.functions.channels import EditTitleRequest, EditAdminRequest, EditCreatorRequest
from telethon.tl.types import ChatAdminRights, ChannelParticipantsAdmins
from typing import List, Dict, Optional, Any
import logging
import json
import os
from datetime import datetime
import asyncio
import aiofiles
import shutil
import sys
from loguru import logger

from telethon.tl.types import ChatAdminRights
from telethon.tl.functions.channels import EditAdminRequest

from models.schemas import ChatCreate, Topic, Template, ChatTemplate

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create console handler
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –•–∞—Ä–¥–∫–æ–¥–∏–º emoji_id –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏ Telegram (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Ö –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
EMOJI_ID_MAP = {
    "üìÑ": 5305467150676382066,
    "üìë": 5305467150676382067,
    "üìù": 5305467150676382068,
    "üí¨": 5305467150676382069,
    "üìö": 5305467150676382070,
    "üìå": 5305467150676382071,
    "üìã": 5305467150676382072,
    "üìÖ": 5305467150676382073,
    "üì¶": 5305467150676382074,
    "üìä": 5305467150676382075,
    "üìà": 5305467150676382076,
    "üìâ": 5305467150676382077,
    "üìÅ": 5305467150676382078,
    "üìÇ": 5305467150676382079,
    "üìí": 5305467150676382080,
    "üìï": 5305467150676382081,
    "üìó": 5305467150676382082,
    "üìò": 5305467150676382083,
    "üìô": 5305467150676382084,
    "üìî": 5305467150676382085,
    "üìì": 5305467150676382086,
    "üìÉ": 5305467150676382087,
    "üìú": 5305467150676382088,
    "üìé": 5305467150676382089,
    "üìè": 5305467150676382090,
    "üìê": 5305467150676382091,
    "üóÇ": 5305467150676382092,
    "üóÉ": 5305467150676382093,
    "üóÑ": 5305467150676382094,
    "üóí": 5305467150676382095,
    "üóì": 5305467150676382096,
    "üóû": 5305467150676382097,
    "üì∞": 5305467150676382098,
    "üè∑": 5305467150676382099,
    "üè∑Ô∏è": 5305467150676382100
}

# --- Bot API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏ ---
from aiogram import Bot
from aiogram.methods import GetForumTopicIconStickers, CreateForumTopic

class BotApiService:
    @staticmethod
    async def get_forum_topic_icon_stickers(bot: Bot):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ emoji_id –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API"""
        result = await bot(GetForumTopicIconStickers())
        # –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ForumTopicIconSticker
        return result.stickers if hasattr(result, 'stickers') else []

    @staticmethod
    async def create_forum_topic(bot: Bot, chat_id: int, name: str, emoji_id: str):
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ —Å —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ Bot API"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
            with open("working_topic_emojis.json", "r", encoding="utf-8") as f:
                emoji_map = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º emoji_id –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–∏—Å–∫–∞
            if emoji_id in emoji_map:
                emoji_id = emoji_map[emoji_id]
            else:
                logger.info(f"–≠–º–æ–¥–∑–∏ {emoji_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–±–æ—á–µ–º —Å–ø–∏—Å–∫–µ ‚Äî —Ç–æ–ø–∏–∫ –±—É–¥–µ—Ç –±–µ–∑ –∏–∫–æ–Ω–∫–∏")
                return None

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ —á–µ—Ä–µ–∑ Bot API
            return await bot.create_forum_topic(
                chat_id=chat_id,
                name=name,
                icon_custom_emoji_id=emoji_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
            return None

class TelethonService:
    def __init__(self, api_id: int, api_hash: str, session_name: str = "bot_session"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Telethon
        :param api_id: API ID from Telegram
        :param api_hash: API Hash from Telegram
        :param session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
        """
        self.api_id = api_id
        self.api_hash = api_hash
        self.session_name = session_name
        self.client = None
        self._templates: Dict[int, List[ChatTemplate]] = {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.templates_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "data", "templates.json")
        os.makedirs(os.path.dirname(self.templates_file), exist_ok=True)
        
        logger.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–æ–≤: {self.templates_file}")
        self._load_templates()

    def _load_templates(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
            self._templates = {}  # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            
            if not os.path.exists(self.templates_file):
                logger.info(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ {self.templates_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                self._save_templates()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(self.templates_file)
            if file_size == 0:
                logger.warning("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç")
                return
                
            logger.info(f"–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤ (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            
            with open(self.templates_file, 'r', encoding='utf-8') as f:
                file_content = f.read()
                if not file_content.strip():
                    logger.warning("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç")
                    return
                    
                try:
                    data = json.loads(file_content)
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
                    logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {file_content[:200]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                    return
                
            if not isinstance(data, dict):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤: {type(data)}")
                return
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ: {len(data)}")
            
            for user_id_str, templates in data.items():
                try:
                    user_id = int(user_id_str)
                    if not isinstance(templates, list):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {type(templates)}")
                        continue
                        
                    self._templates[user_id] = []
                    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    for t in templates:
                        try:
                            if not isinstance(t, dict):
                                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–±–ª–æ–Ω–∞: {type(t)}")
                                continue
                                
                            if 'name' not in t or 'chat_name' not in t:
                                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω–µ: {t}")
                                continue
                                
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                            created_at = None
                            if 'created_at' in t and t['created_at']:
                                try:
                                    created_at = datetime.fromisoformat(t['created_at'])
                                except ValueError as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                            
                            topics = []
                            for tt in t.get('topics', []):
                                topic = Topic(
                                    title=tt['title'],
                                    description=tt.get('description', ''),
                                    icon_emoji=tt.get('icon_emoji'),
                                    icon_color=tt.get('icon_color', 0),
                                    is_closed=tt.get('is_closed', False),
                                    is_hidden=tt.get('is_hidden', False)
                                )
                                if topic.title:
                                    topics.append(topic)
                            if topics:
                                self._templates[user_id].append(ChatTemplate(
                                    name=t['name'],
                                    chat_name=t['chat_name'],
                                    description=t.get('description', ''),
                                    topics=topics,
                                    user_id=user_id,
                                    created_at=created_at
                                ))
                                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω '{t['name']}' —Å {len(topics)} —Ç–æ–ø–∏–∫–∞–º–∏")
                            else:
                                logger.warning(f"–®–∞–±–ª–æ–Ω '{t['name']}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ø–∏–∫–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            
                        except Exception as template_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞: {template_error}")
                            continue
                            
                except Exception as user_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {user_error}")
                    continue
                    
            total_templates = sum(len(templates) for templates in self._templates.values())
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_templates} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(self._templates)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user_id, templates in self._templates.items():
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
                for template in templates:
                    logger.info(f"  - –®–∞–±–ª–æ–Ω '{template.name}': {len(template.topics)} —Ç–æ–ø–∏–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            logger.exception(e)
            self._templates = {}

    async def _save_templates(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ —Ñ–∞–π–ª"""
        try:
            logger.info("=== –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ===")
            logger.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {self.templates_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if not self._templates:
                logger.warning("–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {}
            total_templates = 0
            
            for user_id, templates in self._templates.items():
                if not templates:
                    logger.warning(f"–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    continue
                
                valid_templates = []
                for t in templates:
                    if not t.name or not t.chat_name:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞")
                        continue
                        
                    if not t.topics:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω '{t.name}' –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤")
                        continue
                        
                    template_data = {
                        'name': t.name,
                        'chat_name': t.chat_name,
                        'description': t.description,
                        'topics': [
                            {
                                'title': topic.title,
                                'description': topic.description or '',
                                'icon_emoji': getattr(topic, 'icon_emoji', None),
                                'icon_color': topic.icon_color if topic.icon_color is not None else 0,
                                'is_closed': topic.is_closed,
                                'is_hidden': topic.is_hidden
                            }
                            for topic in t.topics
                            if topic.title
                        ]
                    }
                    
                    if template_data['topics']:
                        valid_templates.append(template_data)
                        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω '{t.name}' —Å {len(template_data['topics'])} —Ç–æ–ø–∏–∫–∞–º–∏")
                    else:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω '{t.name}' - –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏")
                
                if valid_templates:
                    data[str(user_id)] = valid_templates
                    total_templates += len(valid_templates)
            
            if not data:
                logger.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
                return False
                
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(self.templates_file):
                backup_file = f"{self.templates_file}.bak"
                logger.info(f"–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_file}")
                try:
                    shutil.copy2(self.templates_file, backup_file)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {total_templates} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiofiles –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            async with aiofiles.open(self.templates_file, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(data, ensure_ascii=False, indent=2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                async with aiofiles.open(self.templates_file, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    saved_data = json.loads(content)
                
                saved_templates = sum(len(templates) for templates in saved_data.values())
                if saved_templates == total_templates:
                    logger.info("=== –®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ===")
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_templates} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(saved_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    
                    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    if os.path.exists(f"{self.templates_file}.bak"):
                        os.remove(f"{self.templates_file}.bak")
                    return True
                else:
                    raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {saved_templates} != {total_templates}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                if os.path.exists(f"{self.templates_file}.bak"):
                    logger.info("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                    os.replace(f"{self.templates_file}.bak", self.templates_file)
                return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if os.path.exists(f"{self.templates_file}.bak"):
                logger.info("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                os.replace(f"{self.templates_file}.bak", self.templates_file)
            return False

    async def save_chat_template(self, user_id: int, template: ChatTemplate, old_name: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not template.name or not template.chat_name or not template.topics:
                logger.error(f"Invalid template data: {template}")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if user_id not in self._templates:
                self._templates[user_id] = []
            
            templates = self._templates[user_id]
            logger.info(f"Current templates for user {user_id}: {len(templates)}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            if old_name:
                logger.info(f"Updating template '{old_name}' to '{template.name}'")
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ä–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                old_template_idx = next((i for i, t in enumerate(templates) if t.name == old_name), -1)
                if old_template_idx != -1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å –¥—Ä—É–≥–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
                    if any(t.name == template.name and t.name != old_name for t in templates):
                        logger.error(f"Template with name '{template.name}' already exists")
                        return False
                    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
                    template.created_at = templates[old_template_idx].created_at
                    templates[old_template_idx] = template
                    logger.info(f"Template '{old_name}' updated to '{template.name}'")
                else:
                    logger.error(f"Template '{old_name}' not found")
                    return False
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                if any(t.name == template.name for t in templates):
                    logger.error(f"Template with name '{template.name}' already exists")
                    return False
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                template.created_at = datetime.now()
                templates.append(template)
                logger.info(f"New template '{template.name}' added")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {}
            for uid, user_templates in self._templates.items():
                if user_templates:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
                    templates_data = []
                    for t in user_templates:
                        template_dict = {
                            'name': t.name,
                            'chat_name': t.chat_name,
                            'description': t.description or '',
                            'topics': [
                                {
                                    'title': topic.title,
                                    'description': topic.description or '',
                                    'icon_emoji': getattr(topic, 'icon_emoji', None),
                                    'icon_color': topic.icon_color if topic.icon_color is not None else 0,
                                    'is_closed': topic.is_closed,
                                    'is_hidden': topic.is_hidden
                                }
                                for topic in t.topics
                                if topic.title
                            ],
                            'user_id': t.user_id,
                            'created_at': t.created_at.isoformat() if t.created_at else None
                        }
                        templates_data.append(template_dict)
                    data[str(uid)] = templates_data
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.templates_file), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º
            temp_file = f"{self.templates_file}.tmp"
            backup_file = f"{self.templates_file}.bak"
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                async with aiofiles.open(temp_file, 'w', encoding='utf-8') as f:
                    await f.write(json.dumps(data, ensure_ascii=False, indent=2))
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(self.templates_file):
                    shutil.copy2(self.templates_file, backup_file)
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º
                os.replace(temp_file, self.templates_file)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                async with aiofiles.open(self.templates_file, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    saved_data = json.loads(content)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                saved_templates = sum(len(templates) for templates in saved_data.values())
                expected_templates = sum(len(templates) for templates in self._templates.values())
                
                if saved_templates == expected_templates:
                    logger.info(f"Successfully saved {saved_templates} templates")
                    # –£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    if os.path.exists(backup_file):
                        os.remove(backup_file)
                    return True
                else:
                    raise ValueError(f"Template count mismatch: saved {saved_templates}, expected {expected_templates}")
                    
            except Exception as save_error:
                logger.error(f"Error during save operation: {save_error}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if os.path.exists(backup_file):
                    os.replace(backup_file, self.templates_file)
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for file in [temp_file, backup_file]:
                    if os.path.exists(file):
                        os.remove(file)
                raise
            
        except Exception as e:
            logger.error(f"Error saving template: {e}")
            return False

    async def get_user_templates(self, user_id: int) -> List[ChatTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[ChatTemplate]: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        templates = self._templates.get(user_id, [])
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        for template in templates:
            logger.info(f"–®–∞–±–ª–æ–Ω: {template.name}, —Ç–æ–ø–∏–∫–æ–≤: {len(template.topics)}")
        return templates

    async def delete_template(self, user_id: int, template_name: str, chat_name: str = None) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            chat_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
        """
        try:
            logger.info(f"[+] –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if user_id not in self._templates:
                logger.warning(f"[!] –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
                
            templates = self._templates[user_id]
            initial_count = len(templates)
            logger.info(f"[*] –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤: {initial_count}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞
            self._templates[user_id] = [
                t for t in templates 
                if not (t.name == template_name or (chat_name and t.chat_name == chat_name))
            ]
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –∏ –µ–≥–æ
            if not self._templates[user_id]:
                logger.info(f"[*] –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                del self._templates[user_id]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info("[*] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.templates_file), exist_ok=True)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {}
            for uid, user_templates in self._templates.items():
                if user_templates:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
                    data[str(uid)] = [
                        {
                            'name': t.name,
                            'chat_name': t.chat_name,
                            'description': t.description or '',
                            'topics': [
                                {
                                    'title': topic.title,
                                    'description': topic.description or '',
                                    'icon_emoji': getattr(topic, 'icon_emoji', None),
                                    'icon_color': topic.icon_color if topic.icon_color is not None else 0,
                                    'is_closed': topic.is_closed,
                                    'is_hidden': topic.is_hidden
                                }
                                for topic in t.topics
                                if topic.title
                            ],
                            'user_id': t.user_id,
                            'created_at': t.created_at.isoformat() if t.created_at else None
                        }
                        for t in user_templates
                    ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"{self.templates_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(self.templates_file):
                os.replace(self.templates_file, f"{self.templates_file}.bak")
            os.replace(temp_file, self.templates_file)
            
            final_count = len(self._templates.get(user_id, []))
            logger.info(f"[+] –®–∞–±–ª–æ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ë—ã–ª–æ: {initial_count}, —Å—Ç–∞–ª–æ: {final_count}")
            return True
            
        except Exception as e:
            logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            logger.exception(e)
            return False

    async def create_forum_chat(self, chat_name: str, topics: List[Dict[str, str]]) -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä—É–º-—á–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ø–∏–∫–∞–º–∏
        :param chat_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        :param topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤ —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª (—Ñ–æ—Ä—É–º-—á–∞—Ç)
            result = await self.client(CreateChannelRequest(
                title=chat_name,
                about="Forum chat created by bot",
                megagroup=True  # –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
            ))
            
            channel_id = result.chats[0].id
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤
            # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telethon –Ω–µ—Ç
            # –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Bot API –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            
            logger.info(f"Successfully created forum chat: {chat_name} with ID: {channel_id}")
            return channel_id
            
        except Exception as e:
            logger.error(f"Error creating forum chat: {str(e)}")
            return None

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telethon"""
        self.client.disconnect()

    async def create_forum(self, chat_data: ChatCreate, user_id: int = None, notify_func=None) -> Optional[dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—É–º-—á–∞—Ç–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —á–µ—Ä–µ–∑ Telethon (userbot ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü)
            result = await self.client(CreateChannelRequest(
                title=chat_data.title,
                about=chat_data.description,
                megagroup=True,
                forum=True
            ))
            channel = result.chats[0]

            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ InviteToChannelRequest
            bot_username = os.getenv("BOT_USERNAME")
            if bot_username:
                try:
                    await self.client(InviteToChannelRequest(channel=channel.id, users=[bot_username]))
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ InviteToChannelRequest: {e}")
            else:
                logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω BOT_USERNAME –≤ .env, InviteToChannelRequest –ø—Ä–æ–ø—É—â–µ–Ω")

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º
            bot_entity = await self.client.get_entity(bot_username)
            admin_rights = ChatAdminRights(
                add_admins=True,
                change_info=True,
                post_messages=True,
                edit_messages=True,
                delete_messages=True,
                ban_users=True,
                invite_users=True,
                pin_messages=True,
                manage_call=True,
                manage_topics=True,
                anonymous=False
            )
            await self.client(EditAdminRequest(
                channel=channel.id,
                user_id=bot_entity.id,
                admin_rights=admin_rights,
                rank="admin"
            ))

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Telethon —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
            invite_link = None
            user_added = False
            try:
                from telethon.tl.functions.messages import ExportChatInviteRequest
                invite = await self.client(ExportChatInviteRequest(channel.id))
                invite_link = invite.link
                logger.info(f"[INVITE] –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {invite_link}")
            except Exception as e:
                logger.warning(f"[INVITE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É: {e}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ Telethon —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
            if user_id:
                user_added = False
                add_error = None
                try:
                    user_entity = await self.client.get_entity(user_id)
                    await self.client(InviteToChannelRequest(channel=channel.id, users=[user_entity]))
                    user_added = True
                    logger.info(f"[ADD USER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –ø–æ user_id")
                    # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
                    admin_result = await self.make_chat_admin(channel.id, user_id)
                    if admin_result:
                        logger.info(f"[ADMIN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
                    else:
                        logger.warning(f"[ADMIN] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
                    if notify_func:
                        await notify_func(f"üë§ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                except Exception as e:
                    add_error = str(e)
                    logger.warning(f"[ADD USER] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ user_id: {e}")
                    # –ü—Ä–æ–±—É–µ–º –ø–æ username, –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        from telethon.tl.types import User
                        if isinstance(user_entity, User) and user_entity.username:
                            username = user_entity.username
                            await self.client(InviteToChannelRequest(channel=channel.id, users=[username]))
                            user_added = True
                            logger.info(f"[ADD USER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –ø–æ username")
                            if notify_func:
                                await notify_func(f"üë§ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                        else:
                            logger.warning(f"[ADD USER] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                    except Exception as e2:
                        add_error += f" | –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ username: {e2}"
                        logger.warning(f"[ADD USER] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username: {e2}")
                if not user_added and notify_func and invite_link:
                    await notify_func(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {invite_link}\n–ü—Ä–∏—á–∏–Ω–∞: {add_error if add_error else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ Telegram: —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã.")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            elif notify_func and invite_link:
                await notify_func(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {invite_link}")

            # --- –°–æ–∑–¥–∞—ë–º —Ç–æ–ø–∏–∫–∏ —á–µ—Ä–µ–∑ Bot API ---
            bot_instance = Bot(token=os.getenv("BOT_TOKEN"))
            with open("working_topic_emojis.json", "r", encoding="utf-8") as f:
                emoji_map = json.load(f)
            created_topics = []
            botapi_chat_id = channel.id
            if botapi_chat_id > 0:
                botapi_chat_id = int(f'-100{botapi_chat_id}')
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            async def create_topic_with_retry(topic, max_retries=3):
                for attempt in range(max_retries):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º emoji_id –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–∏—Å–∫–∞
                        emoji_id = None
                        if topic.icon_emoji:
                            with open("working_topic_emojis.json", "r", encoding="utf-8") as f:
                                emoji_map = json.load(f)
                                emoji_id = emoji_map.get(topic.icon_emoji)
                                logger.info(f"[TOPIC] –î–ª—è —Ç–æ–ø–∏–∫–∞ '{topic.title}' –∏–∫–æ–Ω–∫–∞ {topic.icon_emoji} -> emoji_id: {emoji_id}")

                        if emoji_id:
                            topic_obj = await bot_instance.create_forum_topic(
                                chat_id=botapi_chat_id,
                                name=topic.title,
                                icon_custom_emoji_id=emoji_id
                            )
                            logger.info(f"[TOPIC] –¢–æ–ø–∏–∫ '{topic.title}' —Å–æ–∑–¥–∞–Ω —Å –∏–∫–æ–Ω–∫–æ–π {topic.icon_emoji}")
                        else:
                            topic_obj = await bot_instance.create_forum_topic(
                                chat_id=botapi_chat_id,
                                name=topic.title
                            )
                            logger.info(f"[TOPIC] –¢–æ–ø–∏–∫ '{topic.title}' —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∏–∫–æ–Ω–∫–∏")
                        
                        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–æ–ø–∏–∫
                        desc = topic.description if topic.description else "."
                        try:
                            await bot_instance.send_message(
                                chat_id=botapi_chat_id,
                                message_thread_id=topic_obj.message_thread_id,
                                text=desc
                            )
                        except Exception as e:
                            logger.warning(f"[TOPIC DESC] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic.title}': {e}")
                        
                        return {
                            "title": topic.title,
                            "thread_id": getattr(topic_obj, 'message_thread_id', None),
                            "icon_emoji": topic.icon_emoji
                        }
                    except Exception as e:
                        if attempt < max_retries - 1:
                            logger.warning(f"[TOPIC] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ '{topic.title}' –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        else:
                            logger.error(f"[TOPIC] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ '{topic.title}' –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")
                            return None

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for topic in chat_data.topics:
                topic_result = await create_topic_with_retry(topic)
                if topic_result:
                    created_topics.append(topic_result)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ–ø–∏–∫–æ–≤

            # --- –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ ---
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞
            user_in_chat = False
            if user_id:
                try:
                    participants = await self.client.get_participants(channel.id)
                    user_in_chat = any(p.id == user_id for p in participants)
                    logger.info(f"[CHECK USER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–µ—Å—Ç—å' if user_in_chat else '–Ω–µ—Ç'} –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ ‚Äî –¥–µ–ª–∞–µ–º –∞–¥–º–∏–Ω–æ–º
                    if user_in_chat:
                        try:
                            admin_result = await self.make_chat_admin(channel.id, user_id)
                            if admin_result:
                                logger.info(f"[ADMIN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                            else:
                                logger.warning(f"[ADMIN] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–¥–º–∏–Ω–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                        except Exception as e:
                            logger.error(f"[ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
                except Exception as e:
                    logger.warning(f"[CHECK USER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
            if hasattr(chat_data, 'template_name') and chat_data.template_name:
                try:
                    template = ChatTemplate(
                        name=chat_data.template_name,
                        chat_name=chat_data.title,
                        description=chat_data.description,
                        topics=chat_data.topics,
                        user_id=user_id
                    )
                    await self.save_chat_template(user_id, template)
                    logger.info(f"[TEMPLATE] –®–∞–±–ª–æ–Ω '{chat_data.template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                except Exception as e:
                    logger.error(f"[TEMPLATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "chat_id": channel.id,
                "chat_name": chat_data.title,
                "description": chat_data.description,
                "user_added": user_in_chat,
                "invite_link": invite_link if not user_in_chat else None
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä—É–º-—á–∞—Ç–∞: {e}")
            if notify_func:
                await notify_func(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            return None
    
    async def add_user_to_chat(self, chat_id: int, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await self.client.get_entity(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.client.add_chat_user(chat_id, user)
            return True
            
        except Exception as e:
            logger.error(f"Error adding user to chat: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()
        logger.info("Telethon client disconnected")

    async def ensure_client(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if self.client is None:
                logger.info("[+] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Telegram...")
                self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
            
            if not self.client.is_connected():
                logger.info("[+] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
                await self.client.connect()
                
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await asyncio.sleep(1)
            
            if not self.client.is_connected():
                logger.error("[x] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                return False
            
            if not await self.client.is_user_authorized():
                logger.info("[!] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                try:
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
                    if self.session_name.endswith('_bot'):
                        await self.client.start(bot_token=os.getenv("BOT_TOKEN"))
                    else:
                        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        phone = os.getenv("PHONE")
                        if not phone:
                            logger.error("[x] –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
                            return False
                            
                        logger.info(f"[+] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {phone}")
                        await self.client.start(phone=phone)
                        
                    await asyncio.sleep(1)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    
                    if not await self.client.is_user_authorized():
                        logger.error("[x] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                        return False
                        
                    logger.info("[+] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
                    logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", exc_info=True)
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            me = await self.client.get_me()
            if not me:
                logger.error("[x] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return False
            
            logger.info(f"[+] –ö–ª–∏–µ–Ω—Ç Telethon –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (ID: {me.id}, {'–±–æ—Ç' if me.bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'})")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            await self._load_templates_async()
            
            return True
            
        except Exception as e:
            logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            logger.debug("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", exc_info=True)
            return False

    async def _load_templates_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            logger.info("[+] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
            self._templates = {}  # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists(os.path.dirname(self.templates_file)):
                logger.info(f"[+] –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤: {os.path.dirname(self.templates_file)}")
                os.makedirs(os.path.dirname(self.templates_file), exist_ok=True)
            
            if not os.path.exists(self.templates_file):
                logger.info(f"[!] –§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ {self.templates_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                async with aiofiles.open(self.templates_file, 'w', encoding='utf-8') as f:
                    await f.write('{}')
                return
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            try:
                async with aiofiles.open(self.templates_file, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    
                if not content.strip():
                    logger.warning("[!] –§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç")
                    return
                
                data = json.loads(content)
                
                if not isinstance(data, dict):
                    logger.error(f"[x] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤: {type(data)}")
                    return
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
                for user_id_str, templates in data.items():
                    try:
                        user_id = int(user_id_str)
                        self._templates[user_id] = []
                        
                        for t in templates:
                            try:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                                created_at = None
                                if 'created_at' in t and t['created_at']:
                                    try:
                                        created_at = datetime.fromisoformat(t['created_at'])
                                    except ValueError as e:
                                        logger.warning(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                                
                                topics = []
                                for tt in t.get('topics', []):
                                    topic = Topic(
                                        title=tt['title'],
                                        description=tt.get('description', ''),
                                        icon_emoji=tt.get('icon_emoji'),
                                        icon_color=tt.get('icon_color', 0),
                                        is_closed=tt.get('is_closed', False),
                                        is_hidden=tt.get('is_hidden', False)
                                    )
                                    if topic.title:
                                        topics.append(topic)
                                if topics:
                                    self._templates[user_id].append(ChatTemplate(
                                        name=t['name'],
                                        chat_name=t['chat_name'],
                                        description=t.get('description', ''),
                                        topics=topics,
                                        user_id=user_id,
                                        created_at=created_at
                                    ))
                                    logger.info(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω '{t['name']}' —Å {len(topics)} —Ç–æ–ø–∏–∫–∞–º–∏")
                                else:
                                    logger.warning(f"[!] –ü—Ä–æ–ø—É—â–µ–Ω —à–∞–±–ª–æ–Ω '{t['name']}' –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤")
                                    
                            except Exception as template_error:
                                logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞: {template_error}")
                                continue
                                
                    except Exception as user_error:
                        logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {user_error}")
                        continue
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_templates = sum(len(templates) for templates in self._templates.values())
                logger.info(f"[+] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_templates} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(self._templates)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
            except json.JSONDecodeError as e:
                logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
                logger.error(f"[x] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {content[:200]}...")
                return
                
        except Exception as e:
            logger.error(f"[x] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            logger.exception(e)
            self._templates = {} 

    async def make_chat_admin(self, chat_id: int, user_id: int) -> bool:
        """Make user an admin in the chat, with retries if user not found immediately."""
        import asyncio
        chat = await self.client.get_entity(chat_id)
        user = None
        for attempt in range(3):
            try:
                participants = await self.client.get_participants(chat)
                user = next((p for p in participants if p.id == user_id), None)
                if user:
                    break
                logger.warning(f'[make_chat_admin] Attempt {attempt+1}: User {user_id} not found, waiting 5 seconds...')
                await asyncio.sleep(5)
            except Exception as e:
                logger.error(f"Error getting user from participants: {e}")
                return False
        if not user:
            logger.error(f"User {user_id} not found in chat participants after 3 attempts")
            return False

        admin_rights = ChatAdminRights(
            add_admins=True,
            change_info=True,
            post_messages=True,
            edit_messages=True,
            delete_messages=True,
            ban_users=True,
            invite_users=True,
            pin_messages=True,
            manage_call=True,
            manage_topics=True,
            anonymous=False
        )
        try:
            await self.client(EditAdminRequest(
                chat,
                user,
                admin_rights,
                "Admin"
            ))
            return True
        except Exception as e:
            logger.error(f"Error making user admin: {str(e)}", exc_info=True)
            return False

    async def transfer_chat_ownership(self, chat_id: int, user_id: int) -> bool:
        """
        –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–∞
        """
        try:
            logger.info(f"Transferring chat {chat_id} ownership to user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            channel = await self.client.get_entity(chat_id)
            if not channel:
                logger.error(f"Channel {chat_id} not found")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.client.get_entity(user_id)
            if not user:
                logger.error(f"User {user_id} not found")
                return False
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            await self.client(EditCreatorRequest(
                channel=channel,
                user_id=user
            ))
            
            logger.info(f"Successfully transferred chat {chat_id} ownership to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error transferring chat ownership: {e}", exc_info=True)
            return False 

    async def get_forum_topic_icons(self):
        """–ó–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ EMOJI_ID_MAP (emoji, id)"""
        return list(EMOJI_ID_MAP.items())

    async def edit_forum_topic_icon(self, chat_id: int, topic_id: int, icon_emoji_id: int) -> bool:
        """–°–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–æ–ø–∏–∫–∞ (emoji) —á–µ—Ä–µ–∑ Telethon (raw TL)"""
        await self.ensure_client()
        try:
            from telethon.tl.functions.channels import EditForumTopicRequest
            await self.client(EditForumTopicRequest(
                channel=chat_id,
                topic_id=topic_id,
                icon_emoji_id=icon_emoji_id
            ))
            return True
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ —Ç–æ–ø–∏–∫–∞ (EditForumTopicRequest): {e}")
            return False 

    async def is_user_in_chat(self, chat_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id –≤ —á–∞—Ç–µ chat_id"""
        try:
            participants = await self.client.get_participants(chat_id)
            return any(p.id == user_id for p in participants)
        except Exception as e:
            # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            return False 