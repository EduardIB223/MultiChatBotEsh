import logging
import asyncio
from typing import Optional, Union
from telethon.tl.functions.channels import EditForumTopicRequest
from telethon.tl import functions
from aiogram import Bot
from telethon import TelegramClient

logger = logging.getLogger(__name__)

STANDARD_EMOJIS = {"üìå", "‚≠ê", "‚ùó", "‚ö†Ô∏è", "üîí", "üìù", "üì¢", "üí°", "‚ùì", "üìö", "üéÆ", "üéµ", "üé¨", "üì∑"}

async def smart_change_icon(
    chat_id: int,
    topic_id: int,
    emoji: str,
    bot: Bot,
    max_retries: int = 3,
    delay: int = 10
) -> bool:
    """–°–º–µ–Ω–∞ –∏–∫–æ–Ω–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ Bot API –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏"""
    if emoji not in STANDARD_EMOJIS:
        logger.warning(f"–≠–º–æ–¥–∑–∏ {emoji} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Bot API")
        return False
    for attempt in range(max_retries):
        try:
            await asyncio.sleep(delay if attempt > 0 else 0)
            await bot.request(
                "editForumTopic",
                {
                    "chat_id": chat_id,
                    "message_thread_id": topic_id,
                    "icon_emoji_id": emoji
                }
            )
            logger.info(f"–ò–∫–æ–Ω–∫–∞ {emoji} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if "CHAT_NOT_FOUND" in str(e) or "not enough rights" in str(e):
                continue
            else:
                break
    return False

async def change_topic_icon(
    chat_id: Union[int, str],
    topic_id: int,
    emoji: str,
    telethon_client: Optional[TelegramClient] = None,
    bot: Optional[Bot] = None
) -> bool:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –∏–∫–æ–Ω–∫–∏:
    1. Bot API (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏)
    2. Telethon (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤)
    """
    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Bot API
    if bot and emoji in STANDARD_EMOJIS:
        try:
            await bot.request(
                "editForumTopic",
                {
                    "chat_id": chat_id,
                    "message_thread_id": topic_id,
                    "icon_emoji_id": emoji
                }
            )
            logger.info(f"–ò–∫–æ–Ω–∫–∞ {emoji} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Bot API")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Bot API: {str(e)}")

    # Fallback –Ω–∞ Telethon (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏)
    if telethon_client and emoji not in STANDARD_EMOJIS:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
            emoji_id = await _get_custom_emoji_id(emoji, telethon_client)
            if not emoji_id:
                return False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw API-–≤—ã–∑–æ–≤
            await telethon_client(EditForumTopicRequest(
                channel=chat_id,
                topic_id=topic_id,
                icon_emoji_id=emoji_id
            ))
            logger.info(f"–ò–∫–æ–Ω–∫–∞ {emoji} (ID: {emoji_id}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telethon")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telethon: {str(e)}")

    return False

async def _get_custom_emoji_id(emoji: str, client: TelegramClient) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ Telethon"""
    try:
        icons = await client.get_forum_topic_icons()
        return next((icon.id for icon in icons if icon.emoticon == emoji), None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏: {str(e)}")
        return None

async def generate_invite_link(
    client: TelegramClient,
    chat_id: Union[int, str]
) -> Optional[str]:
    """–°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Telethon"""
    try:
        result = await client(
            functions.messages.ExportChatInviteRequest(
                peer=chat_id,
                legacy_revoke_permanent=True
            )
        )
        return result.link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")
        return None 