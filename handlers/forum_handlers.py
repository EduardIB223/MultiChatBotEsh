from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.forum_utils import change_topic_icon, generate_invite_link, smart_change_icon, STANDARD_EMOJIS
from services.telethon_service import TelethonService
import logging
import json
import os

router = Router()
logger = logging.getLogger(__name__)

WORKING_EMOJI_FILE = "working_topic_emojis.json"

def save_working_emojis(emoji_map):
    with open(WORKING_EMOJI_FILE, "w", encoding="utf-8") as f:
        json.dump(emoji_map, f, ensure_ascii=False)

def load_working_emojis():
    if os.path.exists(WORKING_EMOJI_FILE):
        with open(WORKING_EMOJI_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

class ForumTopicStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_emoji = State()

@router.message(Command("create_topic"))
async def cmd_create_topic(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞"""
    await state.set_state(ForumTopicStates.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:")

@router.message(ForumTopicStates.waiting_for_name)
async def process_topic_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞"""
    await state.update_data(topic_name=message.text)
    await state.set_state(ForumTopicStates.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞:")

@router.message(ForumTopicStates.waiting_for_description)
async def process_topic_description(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞"""
    await state.update_data(topic_description=message.text)
    await state.set_state(ForumTopicStates.waiting_for_emoji)
    try:
        emoji_map = load_working_emojis()
        if not emoji_map:
            await message.answer("‚ùå –†–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /refresh_topic_emojis")
            await state.clear()
            return
        logger.info(f"[EMOJI MAP - FINAL] {emoji_map}")
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫)
        popular_emojis = ["üìÑ", "üèÜ", "‚ù§Ô∏è", "üëë", "üí¨", "üìö", "üì¶", "üìä", "üìà", "üìâ", "üìÅ", "üìÇ", "üìí", "üìï", "üìó"]
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ emoji_map
        popular_emojis = [e for e in popular_emojis if e in emoji_map]
        # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏
        builder = InlineKeyboardBuilder()
        for emoji in popular_emojis:
            builder.button(text=emoji, callback_data=f"select_emoji:{emoji}")
        builder.adjust(5)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –¥–ª—è —Ç–æ–ø–∏–∫–∞:", reply_markup=builder.as_markup())
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ —Ç–µ–∫—Å—Ç–æ–º
        all_emojis = list(emoji_map.keys())
        all_emojis_text = ' '.join(all_emojis)
        await message.answer(f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∑–Ω–∞—á–∫–∞ –Ω–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –≤—ã—à–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n{all_emojis_text}")
        await state.update_data(emoji_map=emoji_map)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: {e}")
        await state.clear()

@router.message(Command("show_topic_emojis"))
async def show_topic_emojis(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ –∏—Ö ID –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ (Bot API)"""
    try:
        stickers = await bot.get_forum_topic_icon_stickers()
        emoji_map = {s.emoji: s.custom_emoji_id for s in stickers}
        text = '\n'.join([f"{emoji} ‚Äî <code>{emoji_id}</code>" for emoji, emoji_id in emoji_map.items()])
        await message.answer(f"<b>–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤:</b>\n{text}", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("select_emoji:"))
async def process_emoji_selection(
    callback: types.CallbackQuery,
    state: FSMContext,
    telethon_service: TelethonService,
    bot: Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏"""
    emoji = callback.data.split(":")[1]
    data = await state.get_data()
    chat_id = data.get("chat_id") or callback.message.chat.id
    topic_name = data["topic_name"]
    topic_description = data["topic_description"]
    emoji_map = data.get("emoji_map")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
        with open("working_topic_emojis.json", "r", encoding="utf-8") as f:
            working_emoji_map = json.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º emoji_id –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–∏—Å–∫–∞
        emoji_id = working_emoji_map.get(emoji)
        if not emoji_id:
            logger.warning(f"–≠–º–æ–¥–∑–∏ {emoji} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–±–æ—á–µ–º —Å–ø–∏—Å–∫–µ")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        logger.info(f"[TOPIC CREATE] chat_id={chat_id} title={topic_name} emoji={emoji} emoji_id={emoji_id}")
        topic = await bot.create_forum_topic(
            chat_id=chat_id,
            name=topic_name,
            icon_custom_emoji_id=emoji_id
        )
        await callback.message.edit_text(
            f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —Å–æ–∑–¥–∞–Ω —Å –∏–∫–æ–Ω–∫–æ–π {emoji}!"
        )
        await state.clear()
        return
    except Exception as e:
        logger.error(f"[TOPIC CREATE ERROR] chat_id={chat_id} title={topic_name} emoji={emoji} error={e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {str(e)}"
        )
        await state.clear()

@router.callback_query(F.data.startswith("retry_icon:"))
async def handle_retry_icon(
    callback: types.CallbackQuery,
    state: FSMContext,
    telethon_service: TelethonService,
    bot: Bot
):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏"""
    _, chat_id, topic_id = callback.data.split(":")
    chat_id = int(chat_id)
    topic_id = int(topic_id)
    data = await state.get_data()
    emoji = data.get("selected_emoji")
    if not emoji:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å emoji –¥–ª—è —Ç–æ–ø–∏–∫–∞.", show_alert=True)
        return
    success = await smart_change_icon(
        chat_id=chat_id,
        topic_id=topic_id,
        emoji=emoji,
        bot=bot
    )
    if success:
        await callback.message.delete()
        await callback.answer("‚úÖ –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
    else:
        invite_link = await generate_invite_link(telethon_service.client, chat_id)
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É.\n"
            f"1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ –æ–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–æ–º '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏'.\n"
            f"2. –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –≤ —á–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç (–∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å).\n"
            f"3. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.\n"
            f"\n–°—Å—ã–ª–∫–∞ –¥–ª—è —á–∞—Ç–∞: {invite_link}",
            reply_markup=callback.message.reply_markup
        )

@router.message(ForumTopicStates.waiting_for_emoji)
async def process_emoji_text(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    emoji = message.text.strip()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
        with open("working_topic_emojis.json", "r", encoding="utf-8") as f:
            working_emoji_map = json.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º emoji_id –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–∏—Å–∫–∞
        emoji_id = working_emoji_map.get(emoji)
        if not emoji_id:
            await message.answer("‚ùå –¢–∞–∫–æ–π —ç–º–æ–¥–∑–∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–∫–æ–Ω–∫–∏ —Ç–æ–ø–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ).")
            return

        topic_name = data["topic_name"]
        chat_id = message.chat.id
        
        logger.info(f"[TOPIC CREATE] chat_id={chat_id} title={topic_name} emoji={emoji} emoji_id={emoji_id}")
        await bot.create_forum_topic(
            chat_id=chat_id,
            name=topic_name,
            icon_custom_emoji_id=emoji_id
        )
        await message.answer(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —Å–æ–∑–¥–∞–Ω —Å –∏–∫–æ–Ω–∫–æ–π {emoji}!")
        await state.clear()
    except Exception as e:
        logger.error(f"[TOPIC CREATE ERROR] chat_id={chat_id} title={topic_name} emoji={emoji} error={e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {str(e)}")
        await state.clear()

@router.message(Command("test_topic_emojis"))
async def test_topic_emojis(message: types.Message, bot: Bot):
    chat_id = message.chat.id
    try:
        stickers = await bot.get_forum_topic_icon_stickers()
        emoji_map = {s.emoji: s.custom_emoji_id for s in stickers if s.custom_emoji_id}
        working = {}
        failed = []
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –∑–Ω–∞—á–∫–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram.")
        import asyncio
        for i, (emoji, emoji_id) in enumerate(emoji_map.items()):
            try:
                topic = await bot.create_forum_topic(
                    chat_id=chat_id,
                    name=f"test_{emoji}",
                    icon_custom_emoji_id=emoji_id
                )
                working[emoji] = emoji_id
                await asyncio.sleep(1.5)
                await bot.delete_forum_topic(chat_id=chat_id, message_thread_id=topic.message_thread_id)
            except Exception as e:
                failed.append((emoji, str(e)))
                await asyncio.sleep(1.5)
        if working:
            save_working_emojis(working)
            text = '\n'.join([f"{emoji} ‚Äî <code>{emoji_id}</code>" for emoji, emoji_id in working.items()])
            await message.answer(f"<b>–†–∞–±–æ—á–∏–µ –∑–Ω–∞—á–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b>\n{text}", parse_mode="HTML")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞ —Å —ç—Ç–∏–º–∏ –∑–Ω–∞—á–∫–∞–º–∏. Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø.")
        if failed:
            await message.answer(f"<b>–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:</b>\n" + '\n'.join([f"{emoji}: {err}" for emoji, err in failed]), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

@router.message(Command("refresh_topic_emojis"))
async def refresh_topic_emojis(message: types.Message, bot: Bot):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ emoji_id –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç)."""
    chat_id = message.chat.id
    try:
        stickers = await bot.get_forum_topic_icon_stickers()
        emoji_map = {s.emoji: s.custom_emoji_id for s in stickers if s.custom_emoji_id}
        working = {}
        failed = []
        await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Ä–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram.")
        import asyncio
        for i, (emoji, emoji_id) in enumerate(emoji_map.items()):
            try:
                topic = await bot.create_forum_topic(
                    chat_id=chat_id,
                    name=f"test_{emoji}",
                    icon_custom_emoji_id=emoji_id
                )
                working[emoji] = emoji_id
                await asyncio.sleep(1.5)
                await bot.delete_forum_topic(chat_id=chat_id, message_thread_id=topic.message_thread_id)
            except Exception as e:
                failed.append((emoji, str(e)))
                await asyncio.sleep(1.5)
        if working:
            save_working_emojis(working)
            text = '\n'.join([f"{emoji} ‚Äî <code>{emoji_id}</code>" for emoji, emoji_id in working.items()])
            await message.answer(f"<b>–†–∞–±–æ—á–∏–µ –∑–Ω–∞—á–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b>\n{text}", parse_mode="HTML")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞ —Å —ç—Ç–∏–º–∏ –∑–Ω–∞—á–∫–∞–º–∏. Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø.")
        if failed:
            await message.answer(f"<b>–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:</b>\n" + '\n'.join([f"{emoji}: {err}" for emoji, err in failed]), parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}") 