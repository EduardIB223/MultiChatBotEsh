from aiogram import Router, F, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from typing import List, Union
import logging
import os
import io
from datetime import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

from models.schemas import ChatCreate, ChatTemplate, Topic
from services.telethon_service import TelethonService, BotApiService
from services.database import DatabaseService
from states import ChatStates, TemplateCreation, TemplateManagement, ChatCreation
from middlewares import TelethonMiddleware
from keyboards.emoji import get_emoji_keyboard
from aiogram import Bot
from telethon.tl.functions.channels import InviteToChannelRequest, EditAdminRequest
from telethon.tl.types import ChatAdminRights

logger = logging.getLogger(__name__)

# Configure logging
logger.setLevel(logging.DEBUG)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_CHAT_NAME_LENGTH = 128
MAX_DESCRIPTION_LENGTH = 255
MAX_TOPIC_NAME_LENGTH = 128

def format_template_preview(template_name: str, chat_name: str, topics: list, chat_description: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞"""
    preview = f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {template_name}\n"
    preview += f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat_name}\n"
    if chat_description and chat_description.strip() and chat_description != ".":
        preview += f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat_description}\n"
    preview += f"\n–¢–æ–ø–∏–∫–∏ ({len(topics)}):\n"
    for i, topic in enumerate(topics, 1):
        if isinstance(topic, dict):
            emoji = topic.get('icon_emoji') or ''
            title = topic.get('title', '')
            description = topic.get('description', '')
        else:
            emoji = getattr(topic, 'icon_emoji', '') or ''
            title = getattr(topic, 'title', '')
            description = getattr(topic, 'description', '')
        # –§–æ—Ä–º–∞—Ç: 1. <emoji> –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n   –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: <–æ–ø–∏—Å–∞–Ω–∏–µ>
        line = f"{i}. "
        if emoji:
            line += f"{emoji} "
        line += f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: {title}"
        preview += line
        if description and description != '.':
            preview += f"\n   –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: {description}"
        preview += "\n"
    return preview

def get_template_completion_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å —á–∞—Ç")],
            [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω")],
            [KeyboardButton(text="üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_edit_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")],
            [KeyboardButton(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞")],
            [KeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞")],
            [KeyboardButton(text="üìë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫–∏")],
            [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_topic_edit_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def validate_chat_name(name: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
    if not name:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(name) > MAX_CHAT_NAME_LENGTH:
        return False, f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_CHAT_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

def validate_description(description: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
    if len(description) > MAX_DESCRIPTION_LENGTH:
        return False, f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

def validate_topic_name(name: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
    if not name:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(name) > MAX_TOPIC_NAME_LENGTH:
        return False, f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_TOPIC_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
router = Router(name=__name__)

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä—É–º-—á–∞—Ç/—à–∞–±–ª–æ–Ω")],
            [KeyboardButton(text="üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã")]
        ],
        resize_keyboard=True
    )

def get_template_actions_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–æ–º"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # Clear any previous state
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä—É–º-—á–∞—Ç–∞–º–∏.\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ä—É–º-—á–∞—Ç—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —à–∞–±–ª–æ–Ω—ã —á–∞—Ç–æ–≤\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(TemplateCreation.waiting_topic_emoji)
async def process_topic_emoji_selection(callback: CallbackQuery, state: FSMContext):
    if not callback.data or not callback.data.startswith("emoji_"):
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", show_alert=True)
        return
    emoji = callback.data.replace("emoji_", "")
    data = await state.get_data()
    topics = data.get("topics", [])
    description = data.get("current_topic_description", "")
    # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —Å—Ç–∞–≤–∏–º —Ç–æ—á–∫—É
    if not description:
        description = "."
    new_topic = {
        "title": data["current_topic_name"],
        "description": description,
        "icon_emoji": emoji,
        "icon_color": None,
        "is_closed": False,
        "is_hidden": False
    }
    topics.append(new_topic)
    await state.update_data(topics=topics)
    preview = format_template_preview(data["template_name"], data["chat_name"], topics, data.get("chat_description", ""))
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        f"{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫"), KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateCreation.topics)
    return

@router.message(TemplateCreation.waiting_topic_emoji, F.text == ".")
async def skip_topic_emoji_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data.get("topics", [])
    new_topic = {
        "title": data["current_topic_name"],
        "description": data.get("current_topic_description", ""),
        "icon_emoji": None,
        "icon_color": None,
        "is_closed": False,
        "is_hidden": False
    }
    topics.append(new_topic)
    await state.update_data(topics=topics)
    preview = format_template_preview(data["template_name"], data["chat_name"], topics, data.get("chat_description", ""))
    await message.answer(
        f"{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫"), KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateCreation.topics)

@router.message(F.text == "üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã")
async def show_templates(message: Message, state: FSMContext, telethon: TelethonService):
    templates = await telethon.get_user_templates(message.from_user.id)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ (–∏–ª–∏ –ø–∞—Ä–µ name+chat_name)
    unique = {}
    for t in templates:
        key = (t.name, t.chat_name)
        if key not in unique:
            unique[key] = t
    templates = list(unique.values())
    if not templates:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üõ† –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω'",
            reply_markup=get_main_keyboard()
        )
        return
    templates_text = "–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:\n\n"
    for template in templates:
        templates_text += f"{format_template_preview(template.name, template.chat_name, template.topics, template.description)}\n"
    await message.answer(
        templates_text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=template.name)] for template in templates
            ] + [[KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.viewing_templates)

@router.message(TemplateManagement.viewing_templates)
async def handle_template_selection(message: Message, state: FSMContext, telethon: TelethonService):
    if message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    templates = await telethon.get_user_templates(message.from_user.id)
    selected_template = next((t for t in templates if t.name == message.text), None)
    if not selected_template:
        await message.answer(
            "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=template.name)] for template in templates
                ] + [[KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        return
    await state.update_data(selected_template=selected_template.dict(), original_template_name=selected_template.name)
    # –í–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞ –ø–æ —Ç–æ–ø–∏–∫–∞–º –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
    topics_text = format_template_preview(
        selected_template.name,
        selected_template.chat_name,
        selected_template.topics,
        selected_template.description
    )
    await message.answer(
        f"{topics_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ¬´{selected_template.name}¬ª:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.selected_template)

@router.message(TemplateManagement.selected_template)
async def handle_template_actions(message: Message, state: FSMContext, telethon: TelethonService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        await show_templates(message, state, telethon)
        return

    if message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template = data.get("selected_template")
        if not template:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_keyboard())
            await state.clear()
            return
            
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        if await telethon.delete_template(message.from_user.id, template["name"]):
            await message.answer(
                f"‚úÖ –®–∞–±–ª–æ–Ω '{template['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        await state.clear()
        return

    elif message.text == "üöÄ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template = data.get("selected_template")
        if not template:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_keyboard())
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        try:
            chat_data = ChatCreate(
                title=template["chat_name"],
                description=template["description"],
                topics=[Topic(**t) for t in template["topics"]]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é —á–∞—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—É–º-—á–∞—Ç —á–µ—Ä–µ–∑ Telethon
            result = await telethon.create_forum(chat_data, message.from_user.id)
            if result:
                if result.get('user_added'):
                    await status_msg.edit_text(
                        f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º. (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤)\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['chat_name']}"
                    )
                    await state.clear()
                    await cmd_start(message, state)
                    return
                else:
                    invite_link = result.get('invite_link')
                    await status_msg.edit_text(
                        f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> {invite_link}\n\n"
                        f"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç (–ª–∏–º–∏—Ç Telegram –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏).\n"
                        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —á–∞—Ç.\n"
                        f"2. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(text="üîë –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º", callback_data="make_admin")]
                            ]
                        ),
                        parse_mode="HTML"
                    )
                    await state.update_data(created_chat_id=result['chat_id'], invite_link=invite_link)
                    return
            else:
                await status_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=None
                )
                await state.clear()
        except Exception as e:
            logger.error(f"Error creating chat from template: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
        return

    elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        # –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        data = await state.get_data()
        template = data.get("selected_template")
        if not template:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_keyboard())
            await state.clear()
            return
            
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")],
                    [KeyboardButton(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞")],
                    [KeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞")],
                    [KeyboardButton(text="üìë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫–∏")],
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(TemplateManagement.editing)
        return

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")]
            ],
            resize_keyboard=True
        )
    )

@router.message(F.text == "üõ† –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω")
async def create_template_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    await state.set_state(TemplateCreation.waiting_template_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(TemplateCreation.waiting_template_name)
async def process_template_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {message.text}")
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return

    await state.update_data(template_name=message.text)
    await state.set_state(TemplateCreation.waiting_name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(TemplateCreation.waiting_name)
async def process_chat_name_for_template(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {message.text}")
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return

    await state.update_data(chat_name=message.text)
    await state.set_state(TemplateCreation.waiting_description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(TemplateCreation.waiting_description)
async def process_template_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {message.text}")
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return

    description = "" if message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    await state.update_data(chat_description=description, topics=[])
    await state.set_state(TemplateCreation.waiting_topic_name)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(TemplateCreation.waiting_topic_name)
async def process_template_topic(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
    is_valid, error_message = validate_topic_name(message.text)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
    await state.update_data(current_topic_name=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=".")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateCreation.waiting_topic_description)

@router.message(TemplateCreation.waiting_topic_description)
async def process_template_topic_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return
    await state.update_data(current_topic_description=("" if message.text == "." else message.text))
    from handlers.forum_handlers import load_working_emojis
    emoji_map = load_working_emojis()
    if not emoji_map:
        await message.answer("‚ùå –†–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /refresh_topic_emojis")
        await state.clear()
        return
    all_emojis = list(emoji_map.keys())
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 80 emoji (5 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ 16)
    max_emojis = 80
    all_emojis = all_emojis[:max_emojis]
    chunk_size = 16
    row_size = 8
    for i in range(0, len(all_emojis), chunk_size):
        builder = InlineKeyboardBuilder()
        chunk = all_emojis[i:i+chunk_size]
        for j in range(0, len(chunk), row_size):
            row = chunk[j:j+row_size]
            for emoji in row:
                builder.button(text=emoji, callback_data=f"emoji_{emoji}")
            builder.adjust(row_size)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ (—ç–º–æ–¥–∑–∏) –¥–ª—è —Ç–æ–ø–∏–∫–∞ (—á–∞—Å—Ç—å {i//chunk_size+1}):", reply_markup=builder.as_markup())
    await state.set_state(TemplateCreation.waiting_topic_emoji)

@router.message(TemplateCreation.topics, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫")
async def add_new_topic(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateCreation.waiting_topic_name)

@router.message(TemplateCreation.topics, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_topics(message: Message, state: FSMContext):
    data = await state.get_data()
    preview = format_template_preview(data["template_name"], data["chat_name"], data["topics"])
    await message.answer(
        f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!\n\n{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_template_completion_keyboard()
    )
    await state.set_state(TemplateManagement.completed)

@router.message(TemplateManagement.completed, F.text.func(lambda t: t and t.strip() == "‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å —á–∞—Ç"))
async def create_chat_from_template(message: Message, state: FSMContext, telethon: TelethonService, bot: Bot):
    data = await state.get_data()
    try:
        template_name = data.get("template_name")
        chat_name = data.get("chat_name")
        chat_description = data.get("chat_description", "")
        topics = data.get("topics", [])
        if not chat_name or not topics:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞.", reply_markup=get_main_keyboard())
            await state.clear()
            return
        clean_topics = []
        for t in topics:
            t = dict(t) if isinstance(t, dict) else t.dict()
            if t.get("description", "") == ".":
                t["description"] = ""
            clean_topics.append(Topic(**t))
        chat_data = ChatCreate(
            title=chat_name,
            description=chat_description,
            topics=clean_topics
        )
        status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é —á–∞—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
        result = await telethon.create_forum(chat_data, message.from_user.id)
        if result:
            if result.get('user_added'):
                await status_msg.edit_text(
                    f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º. (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤)\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['chat_name']}"
                )
                await state.clear()
                await cmd_start(message, state)
                return
            else:
                invite_link = result.get('invite_link')
                await status_msg.edit_text(
                    f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> {invite_link}\n\n"
                    f"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç (–ª–∏–º–∏—Ç Telegram –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏).\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —á–∞—Ç.\n"
                    f"2. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîë –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º", callback_data="make_admin")]
                        ]
                    ),
                    parse_mode="HTML"
                )
                await state.update_data(created_chat_id=result['chat_id'], invite_link=invite_link)
                return
        else:
            await status_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
            await state.clear()
    except Exception as e:
        logger.error(f"Error creating chat from template (completed menu): {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

@router.message(TemplateManagement.completed, F.text.func(lambda t: t and t.strip() == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω"))
async def save_template(message: Message, state: FSMContext, telethon: TelethonService):
    data = await state.get_data()
    template = data.get("selected_template") or data
    template_name = template.get("template_name") or template.get("name")
    chat_name = template.get("chat_name")
    chat_description = template.get("chat_description") or template.get("description")
    topics = template.get("topics")
    if not template_name or not chat_name or not topics or not isinstance(topics, list) or len(topics) == 0:
        await message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü–æ—Ö–æ–∂–µ, —à–∞–±–ª–æ–Ω –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    try:
        chat_template = ChatTemplate(
            name=template_name,
            chat_name=chat_name,
            description=chat_description,
            topics=[Topic(**t) if isinstance(t, dict) else t for t in topics],
            user_id=message.from_user.id
        )
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω, –ø–µ—Ä–µ–¥–∞—ë–º original_template_name
        if "selected_template" in data:
            old_name = data.get("original_template_name") or data["selected_template"].get("name") or data["selected_template"].get("template_name")
            result = await telethon.save_chat_template(
                user_id=message.from_user.id,
                template=chat_template,
                old_name=old_name
            )
        else:
            result = await telethon.save_chat_template(
                user_id=message.from_user.id,
                template=chat_template
            )
        if result:
            await message.answer("–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω.", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error saving template: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.", reply_markup=get_main_keyboard())
    await state.clear()

@router.message(TemplateManagement.completed, F.text.func(lambda t: t and t.strip() == "üöÄ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å"))
async def save_and_create(message: Message, state: FSMContext, telethon: TelethonService):
    import logging
    logger = logging.getLogger(__name__)
    data = await state.get_data()
    template = data.get("selected_template") or data
    template_name = template.get("template_name") or template.get("name")
    chat_name = template.get("chat_name")
    chat_description = template.get("chat_description") or template.get("description")
    topics = template.get("topics")
    if not template_name or not chat_name or not topics or not isinstance(topics, list) or len(topics) == 0:
        await message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞. –ü–æ—Ö–æ–∂–µ, —à–∞–±–ª–æ–Ω –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    try:
        chat_template = ChatTemplate(
            name=template_name,
            chat_name=chat_name,
            description=chat_description,
            topics=[Topic(**t) if isinstance(t, dict) else t for t in topics],
            user_id=message.from_user.id
        )
        if "selected_template" in data:
            old_name = data["selected_template"].get("name") or data["selected_template"].get("template_name")
            save_result = await telethon.save_chat_template(
                user_id=message.from_user.id,
                template=chat_template,
                old_name=old_name
            )
        else:
            save_result = await telethon.save_chat_template(
                user_id=message.from_user.id,
                template=chat_template
            )
        if not save_result:
            logger.error(f"[save_and_create] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω '{template_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_main_keyboard())
            await state.clear()
            return
    except Exception as e:
        logger.error(f"[save_and_create] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", reply_markup=get_main_keyboard())
        await state.clear()
        return
    # –°–æ–∑–¥–∞—ë–º —á–∞—Ç
    try:
        clean_topics = []
        for t in topics:
            t = dict(t) if isinstance(t, dict) else t.dict()
            if t.get("description", "") == ".":
                t["description"] = ""
            clean_topics.append(Topic(**t))
        chat_data = ChatCreate(
            title=chat_name,
            description=chat_description,
            topics=clean_topics
        )
        status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é —á–∞—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
        result = await telethon.create_forum(chat_data, message.from_user.id)
        if result:
            if result.get('user_added'):
                await status_msg.edit_text(
                    f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º. (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤)\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['chat_name']}"
                )
                await state.clear()
                await cmd_start(message, state)
                return
            else:
                invite_link = result.get('invite_link')
                await status_msg.edit_text(
                    f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> {invite_link}\n\n"
                    f"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç (–ª–∏–º–∏—Ç Telegram –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏).\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —á–∞—Ç.\n"
                    f"2. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîë –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º", callback_data="make_admin")]
                        ]
                    ),
                    parse_mode="HTML"
                )
                await state.update_data(created_chat_id=result['chat_id'], invite_link=invite_link)
                return
        else:
            logger.error(f"[save_and_create] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{template_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await status_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
            await state.clear()
    except Exception as e:
        logger.error(f"[save_and_create] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}", reply_markup=get_main_keyboard())
        await state.clear()

@router.message(TemplateManagement.completed, F.text.func(lambda t: t and t.strip() == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
async def edit_template_completed(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=get_edit_keyboard()
    )
    await state.set_state(TemplateManagement.editing)

@router.message(TemplateManagement.completed, F.text.func(lambda t: t and t.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
async def cancel_template_completed(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ TemplateManagement.editing_topics ---

@router.message(TemplateManagement.editing_topics, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫")
async def add_topic_in_edit(message: Message, state: FSMContext):
    await state.set_state(TemplateManagement.adding_topic_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
            resize_keyboard=True
        )
    )

@router.message(TemplateManagement.adding_topic_name)
async def process_new_topic_name_in_edit(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await handle_edit_topics(message, state)
        return
    is_valid, error_message = validate_topic_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    await state.update_data(current_topic_name=message.text)
    await state.set_state(TemplateManagement.adding_topic_description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=".")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
            resize_keyboard=True
        )
    )

@router.message(TemplateManagement.adding_topic_description)
async def process_new_topic_description_in_edit(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await handle_edit_topics(message, state)
        return
    await state.update_data(current_topic_description=(message.text if message.text != "." else ""))
    from handlers.forum_handlers import load_working_emojis
    emoji_map = load_working_emojis()
    if not emoji_map:
        await message.answer("‚ùå –†–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /refresh_topic_emojis")
        await state.clear()
        return
    all_emojis = list(emoji_map.keys())
    max_emojis = 80
    all_emojis = all_emojis[:max_emojis]
    chunk_size = 16
    row_size = 8
    for i in range(0, len(all_emojis), chunk_size):
        builder = InlineKeyboardBuilder()
        chunk = all_emojis[i:i+chunk_size]
        for j in range(0, len(chunk), row_size):
            row = chunk[j:j+row_size]
            for emoji in row:
                builder.button(text=emoji, callback_data=f"add_emoji_{emoji}")
            builder.adjust(row_size)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ (—ç–º–æ–¥–∑–∏) –¥–ª—è —Ç–æ–ø–∏–∫–∞ (—á–∞—Å—Ç—å {i//chunk_size+1}):", reply_markup=builder.as_markup())
    await state.set_state(TemplateManagement.adding_topic_emoji)

@router.message(TemplateManagement.adding_topic_emoji, F.text.in_([".", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—á–∏—Å—Ç–∏—Ç—å —ç–º–æ–¥–∑–∏"]))
async def skip_edit_topic_emoji(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data.get("topics", [])
    idx = data.get("editing_topic_index")
    if idx is not None and 0 <= idx < len(topics):
        topics[idx]["icon_emoji"] = None
        await state.update_data(topics=topics)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template
        if "selected_template" in data:
            selected = data["selected_template"]
            selected["topics"] = topics
            await state.update_data(selected_template=selected)
    await message.answer("–≠–º–æ–¥–∑–∏ —Ç–æ–ø–∏–∫–∞ –æ—á–∏—â–µ–Ω–æ!")
    await handle_edit_topics(message, state)

@router.message(TemplateManagement.adding_topic_emoji, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
async def cancel_add_topic_emoji(message: Message, state: FSMContext):
    await handle_edit_topics(message, state)

@router.callback_query(TemplateManagement.adding_topic_emoji)
async def process_add_topic_emoji(callback: CallbackQuery, state: FSMContext):
    if not callback.data or not callback.data.startswith("add_emoji_"):
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", show_alert=True)
        return
    emoji = callback.data.replace("add_emoji_", "")
    data = await state.get_data()
    topics = data.get("topics", [])
    new_topic = {
        "title": data["current_topic_name"],
        "description": data.get("current_topic_description", ""),
        "icon_emoji": emoji,
        "icon_color": None,
        "is_closed": False,
        "is_hidden": False
    }
    topics.append(new_topic)
    await state.update_data(topics=topics)
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template, –µ—Å–ª–∏ –µ—Å—Ç—å
    if "selected_template" in data:
        selected = data["selected_template"]
        selected["topics"] = topics
        await state.update_data(selected_template=selected)
    await callback.message.edit_reply_markup()
    await callback.message.answer("–¢–æ–ø–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await handle_edit_topics(callback.message, state)

@router.message(TemplateManagement.editing_topics, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def finish_editing_topics(message: Message, state: FSMContext):
    data = await state.get_data()
    template = data.get("selected_template", data)
    preview = format_template_preview(
        template.get("template_name") or template.get("name"),
        template.get("chat_name"),
        template.get("topics", [])
    )
    await message.answer(
        f"‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_template_completion_keyboard()
    )
    await state.set_state(TemplateManagement.completed)

@router.message(TemplateManagement.editing_topics, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_editing_topics(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
@router.message(TemplateManagement.editing_topics, F.text.func(lambda t: t and t.strip() == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫"))
async def handle_edit_topic_select(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data.get("topics", [])
    if not topics:
        await message.answer("–ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    topic_list = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
    keyboard = []
    for i, topic in enumerate(topics, 1):
        title = topic.get('title', '') if isinstance(topic, dict) else getattr(topic, 'title', '')
        topic_list += f"{i}. {title}\n"
        keyboard.append([KeyboardButton(text=f"{i}. {title}")])
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    await message.answer(topic_list, reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True))
    await state.set_state(TemplateManagement.editing_topic_select)

@router.message(TemplateManagement.editing_topics, F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫")
async def handle_delete_topic_select(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data.get("topics", [])
    if not topics:
        await message.answer("–ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    topic_list = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    keyboard = []
    for i, topic in enumerate(topics, 1):
        title = topic.get('title', '') if isinstance(topic, dict) else getattr(topic, 'title', '')
        topic_list += f"{i}. {title}\n"
        keyboard.append([KeyboardButton(text=f"{i}. {title}")])
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    await message.answer(topic_list, reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True))
    await state.set_state(TemplateManagement.deleting_topic_select)

@router.message(TemplateManagement.deleting_topic_select)
async def handle_delete_topic(message: Message, state: FSMContext):
    import logging
    logger = logging.getLogger(__name__)
    logger.warning(f"[DEBUG] handle_delete_topic: message.text={message.text}, state={await state.get_state()}")
    data = await state.get_data()
    topics = data.get("topics", [])
    text = message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_edit_topics(message, state)
        return
    try:
        if text[0].isdigit() and "." in text:
            topic_index = int(text.split(".")[0]) - 1
        else:
            topic_index = next((i for i, t in enumerate(topics) if (t.get('title') if isinstance(t, dict) else getattr(t, 'title', '')) == text), None)
        if topic_index is None or topic_index < 0 or topic_index >= len(topics):
            raise ValueError
    except Exception:
        logger.warning(f"[DEBUG] handle_delete_topic: failed to find topic_index for text={text}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        return
    logger.warning(f"[DEBUG] handle_delete_topic: deleting topic_index={topic_index}")
    topics.pop(topic_index)
    await state.update_data(topics=topics)
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template
    if "selected_template" in data:
        selected = data["selected_template"]
        selected["topics"] = topics
        await state.update_data(selected_template=selected)
    await handle_edit_topics(message, state)

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---
@router.message(TemplateManagement.editing_topics)
async def block_manual_input_in_editing_topics(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞–º–∏.", reply_markup=get_topic_edit_keyboard())

@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_generic(message: Message, state: FSMContext):
    current_state = await state.get_state()
    # –ù–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è ‚Äî –∫ —Å–ø–∏—Å–∫—É —Ç–æ–ø–∏–∫–æ–≤
    if current_state in ["TemplateManagement:editing_topic_select", "TemplateManagement:deleting_topic_select"]:
        await handle_edit_topics(message, state)
    # –ù–∞–∑–∞–¥ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ ‚Äî –∫ —Å–ø–∏—Å–∫—É —Ç–æ–ø–∏–∫–æ–≤
    elif current_state in ["TemplateManagement.adding_topic_name", "TemplateManagement.adding_topic_description"]:
        await handle_edit_topics(message, state)
    # –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
    elif current_state == "TemplateManagement.editing":
        data = await state.get_data()
        template = data.get("selected_template", data)
        preview = format_template_preview(
            template.get("template_name") or template.get("name"),
            template.get("chat_name"),
            template.get("topics", [])
        )
        await message.answer(
            f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:\n\n{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
            reply_markup=get_edit_keyboard()
        )
        await state.set_state(TemplateManagement.editing)
    else:
        await state.clear()
        await cmd_start(message, state)

@router.message(TemplateManagement.editing, F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
async def edit_template_name_emoji(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(TemplateManagement.editing_template_name)

@router.message(TemplateManagement.editing, F.text == "üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞")
async def edit_chat_name_emoji(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    await state.set_state(TemplateManagement.editing_chat_name)

@router.message(TemplateManagement.editing, F.text == "üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞")
async def edit_chat_description_emoji(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞:")
    await state.set_state(TemplateManagement.editing_chat_description)

@router.message(TemplateManagement.editing, F.text == "üìë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫–∏")
async def edit_topics_emoji(message: Message, state: FSMContext):
    await handle_edit_topics(message, state)

@router.message(TemplateManagement.editing_topic_select)
async def handle_edit_topic_field_select(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data.get("topics", [])
    text = message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_edit_topics(message, state)
        return
    try:
        if text[0].isdigit() and "." in text:
            topic_index = int(text.split(".")[0]) - 1
        else:
            topic_index = next((i for i, t in enumerate(topics) if (t.get('title') if isinstance(t, dict) else getattr(t, 'title', '')) == text), None)
        if topic_index is None or topic_index < 0 or topic_index >= len(topics):
            raise ValueError
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        return
    await state.update_data(editing_topic_index=topic_index)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–æ–ø–∏–∫–µ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.editing_topic_field_select)

@router.message(TemplateManagement.editing_topic_field_select, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def process_edit_topic_name(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.editing_topic_name)

@router.message(TemplateManagement.editing_topic_name)
async def process_edit_topic_name_input(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_edit_topics(message, state)
        return
    is_valid, error_message = validate_topic_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    data = await state.get_data()
    topics = data.get("topics", [])
    idx = data.get("editing_topic_index")
    if idx is not None and 0 <= idx < len(topics):
        topics[idx]["title"] = message.text
        await state.update_data(topics=topics)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template
        if "selected_template" in data:
            selected = data["selected_template"]
            selected["topics"] = topics
            await state.update_data(selected_template=selected)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await handle_edit_topics(message, state)

@router.message(TemplateManagement.editing_topic_field_select, F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def process_edit_topic_description(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=".")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.editing_topic_description)

@router.message(TemplateManagement.editing_topic_description)
async def process_edit_topic_description_input(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await handle_edit_topics(message, state)
        return
    data = await state.get_data()
    topics = data.get("topics", [])
    idx = data.get("editing_topic_index")
    if idx is not None and 0 <= idx < len(topics):
        topics[idx]["description"] = message.text if message.text != "." else ""
        await state.update_data(topics=topics)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template
        if "selected_template" in data:
            selected = data["selected_template"]
            selected["topics"] = topics
            await state.update_data(selected_template=selected)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await handle_edit_topics(message, state)

@router.message(TemplateManagement.editing_topic_field_select, F.text == "üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏")
async def select_edit_topic_emoji(message: Message, state: FSMContext):
    from handlers.forum_handlers import load_working_emojis
    emoji_map = load_working_emojis()
    if not emoji_map:
        await message.answer("‚ùå –†–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /refresh_topic_emojis")
        await state.clear()
        return
    all_emojis = list(emoji_map.keys())
    max_emojis = 80
    all_emojis = all_emojis[:max_emojis]
    chunk_size = 16
    row_size = 8
    for i in range(0, len(all_emojis), chunk_size):
        builder = InlineKeyboardBuilder()
        chunk = all_emojis[i:i+chunk_size]
        for j in range(0, len(chunk), row_size):
            row = chunk[j:j+row_size]
            for emoji in row:
                builder.button(text=emoji, callback_data=f"edit_emoji_{emoji}")
            builder.adjust(row_size)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∑–Ω–∞—á–æ–∫ (—ç–º–æ–¥–∑–∏) –¥–ª—è —Ç–æ–ø–∏–∫–∞ (—á–∞—Å—Ç—å {i//chunk_size+1}):", reply_markup=builder.as_markup())
    # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
    await message.answer(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —ç–º–æ–¥–∑–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(TemplateManagement.editing_topic_emoji)

@router.callback_query(TemplateManagement.editing_topic_emoji)
async def process_edit_topic_emoji(callback: CallbackQuery, state: FSMContext):
    if not callback.data or not callback.data.startswith("edit_emoji_"):
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", show_alert=True)
        return
    emoji = callback.data.replace("edit_emoji_", "")
    data = await state.get_data()
    topics = data.get("topics", [])
    idx = data.get("editing_topic_index")
    if idx is not None and 0 <= idx < len(topics):
        topics[idx]["icon_emoji"] = emoji
        await state.update_data(topics=topics)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å selected_template
        if "selected_template" in data:
            selected = data["selected_template"]
            selected["topics"] = topics
            await state.update_data(selected_template=selected)
    await callback.message.edit_reply_markup()
    await callback.message.answer("–≠–º–æ–¥–∑–∏ —Ç–æ–ø–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await handle_edit_topics(callback.message, state)

@router.message(F.text == "‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä—É–º-—á–∞—Ç/—à–∞–±–ª–æ–Ω")
async def handle_create_forum_chat(message: Message, state: FSMContext):
    await state.clear()
    await create_template_start(message, state)

@router.message(TemplateManagement.editing_template_name)
async def save_template_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(template_name=message.text)
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º selected_template, –µ—Å–ª–∏ –µ—Å—Ç—å
    if "selected_template" in data:
        selected = data["selected_template"]
        selected["template_name"] = message.text
        selected["name"] = message.text
        await state.update_data(selected_template=selected)
        template = selected
    else:
        template = data
        template["template_name"] = message.text
        template["name"] = message.text
    preview = format_template_preview(
        template.get("template_name") or template.get("name"),
        template.get("chat_name"),
        template.get("topics", [])
    )
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{preview}", reply_markup=get_edit_keyboard())
    await state.set_state(TemplateManagement.editing)

@router.message(TemplateManagement.editing_chat_name)
async def save_chat_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(chat_name=message.text)
    if "selected_template" in data:
        selected = data["selected_template"]
        selected["chat_name"] = message.text
        await state.update_data(selected_template=selected)
        template = selected
    else:
        template = data
        template["chat_name"] = message.text
    preview = format_template_preview(
        template.get("template_name") or template.get("name"),
        template.get("chat_name"),
        template.get("topics", [])
    )
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{preview}", reply_markup=get_edit_keyboard())
    await state.set_state(TemplateManagement.editing)

@router.message(TemplateManagement.editing_chat_description)
async def save_chat_description(message: Message, state: FSMContext):
    data = await state.get_data()
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ chat_description, –∏ description –≤–µ–∑–¥–µ
    await state.update_data(chat_description=message.text, description=message.text)
    if "selected_template" in data:
        selected = data["selected_template"]
        selected["chat_description"] = message.text
        selected["description"] = message.text
        await state.update_data(selected_template=selected)
        template = selected
    else:
        template = data
        template["chat_description"] = message.text
        template["description"] = message.text
    preview = format_template_preview(
        template.get("template_name") or template.get("name"),
        template.get("chat_name"),
        template.get("topics", []),
        template.get("chat_description") or template.get("description")
    )
    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{preview}", reply_markup=get_edit_keyboard())
    await state.set_state(TemplateManagement.editing)

@router.message(F.text == "üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã")
async def handle_my_templates(message: Message, state: FSMContext, telethon: TelethonService):
    await state.clear()
    await show_templates(message, state, telethon)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")
async def cancel_template_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ TemplateCreation
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_any_template_creation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and str(current_state).startswith("TemplateCreation"):
        logger.info(f"[CANCEL] Universal cancel handler called, state: {current_state}")
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

@router.message(TemplateCreation.topics, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_template_topics(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

@router.message(TemplateManagement.editing, F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def save_template_editing(message: Message, state: FSMContext, telethon: TelethonService):
    data = await state.get_data()
    template = data.get("selected_template", data)
    template_name = template.get("template_name") or template.get("name")
    chat_name = template.get("chat_name")
    chat_description = template.get("chat_description") or template.get("description")
    topics = template.get("topics", [])
    if not template_name or not chat_name or not topics:
        await message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    try:
        chat_template = ChatTemplate(
            name=template_name,
            chat_name=chat_name,
            description=chat_description,
            topics=[Topic(**t) if isinstance(t, dict) else t for t in topics],
            user_id=message.from_user.id
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        old_name = data.get("original_template_name") or template.get("name")
        result = await telethon.save_chat_template(
            user_id=message.from_user.id,
            template=chat_template,
            old_name=old_name
        )
        if result:
            await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_keyboard())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error saving template (editing): {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", reply_markup=get_main_keyboard())
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ ---
async def handle_edit_topics(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"""
    data = await state.get_data()
    template = data.get("selected_template", data)
    template_name = template.get("template_name") or template.get("name")
    chat_name = template.get("chat_name")
    topics = template.get("topics", [])
    chat_description = template.get("chat_description") or template.get("description")
    # –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    await state.update_data(
        template_name=template_name,
        chat_name=chat_name,
        chat_description=chat_description,
        topics=topics
    )
    preview = format_template_preview(template_name, chat_name, topics, chat_description)
    await message.answer(
        f"üìë –¢–µ–∫—É—â–∏–µ —Ç–æ–ø–∏–∫–∏:\n\n{preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_topic_edit_keyboard()
    )
    await state.set_state(TemplateManagement.editing_topics)

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    except Exception:
        pass
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await callback.answer()

@router.callback_query(F.data == "make_admin")
async def make_me_admin_callback(callback: CallbackQuery, state: FSMContext, telethon: TelethonService):
    import logging
    logger = logging.getLogger(__name__)
    logger.warning(f"[DEBUG] make_admin_callback: callback={callback.data}, user={callback.from_user.id}, state={await state.get_state()}")
    state_data = await state.get_data()
    chat_id = state_data.get("created_chat_id")
    invite_link = state_data.get("invite_link")
    # –ï—Å–ª–∏ invite_link –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ Telethon
    if chat_id and not invite_link:
        try:
            invite_link = await telethon.get_invite_link(chat_id)
            if invite_link:
                await state.update_data(invite_link=invite_link)
        except Exception as e:
            logger.error(f"[make_admin] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å invite_link –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    if not chat_id:
        logger.warning(f"[make_admin] –ù–µ—Ç chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, –∫–∏–¥–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        await callback.answer()
        return
    logger.info(f"[make_admin] –ï—Å—Ç—å chat_id={chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, –ø—Ä–æ–±—É—é —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    is_member = await telethon.is_user_in_chat(chat_id, callback.from_user.id)
    if not is_member:
        logger.info(f"[make_admin] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {chat_id}, –ø—Ä–æ—Å–∏–º –∑–∞–π—Ç–∏ –≤ —á–∞—Ç")
        text = ""
        if invite_link:
            text += f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> {invite_link}\n\n"
        text += "‚ùóÔ∏è –Ø –Ω–µ –≤–∏–∂—É –≤–∞—Å –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞.\n–í–æ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' –∏–ª–∏ '–°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º'."
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="make_admin")],
                    [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_admin")],
                    [InlineKeyboardButton(text="üîë –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º", callback_data="make_admin")]
                ]
            ),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    logger.info(f"[make_admin] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {chat_id}, –Ω–∞–∑–Ω–∞—á–∞—é –∞–¥–º–∏–Ω–æ–º...")
    status_msg = await callback.message.edit_text("‚è≥ –ù–∞–∑–Ω–∞—á–∞—é –≤–∞—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...")
    success = await telethon.make_chat_admin(chat_id, callback.from_user.id)
    if success:
        logger.info(f"[make_admin] –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º: {callback.from_user.id} –≤ —á–∞—Ç–µ {chat_id}")
        await callback.message.edit_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            )
        )
        await state.clear()
    else:
        logger.error(f"[make_admin] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º: {callback.from_user.id} –≤ —á–∞—Ç–µ {chat_id}")
        error_text = ""
        if invite_link:
            error_text += f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> {invite_link}\n\n"
        error_text += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.\n\n–í–æ–π–¥–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –≤–∞—Å –∞–¥–º–∏–Ω–æ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' –∏–ª–∏ '–°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º'."
        await callback.message.edit_text(
            error_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="make_admin")],
                    [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_admin")],
                    [InlineKeyboardButton(text="üîë –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º", callback_data="make_admin")]
                ]
            ),
            parse_mode="HTML"
        )

def register_commands(dp: Dispatcher, telethon: TelethonService):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ middlewares
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
        telethon: –°–µ—Ä–≤–∏—Å Telethon
    """
    # Middleware –¥–ª—è Telethon
    dp.message.middleware(TelethonMiddleware(telethon))
    dp.callback_query.middleware(TelethonMiddleware(telethon))
    # –¢–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
    router.message.filter(F.chat.type == "private")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    dp.include_router(router)